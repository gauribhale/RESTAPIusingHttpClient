package com.qa.tests;

import java.io.IOException;

import java.util.HashMap;

import org.apache.http.Header;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.qa.client.RESTClient;

import Base.TestBase;


public class GETAPITest extends TestBase {
	TestBase testbase;
	RESTClient client;
	String url;
	String apiUrl;
	CloseableHttpResponse httpResponse;

	@BeforeMethod
	public void setUp() throws ClientProtocolException, IOException {
		testbase = new TestBase();
		url = prop.getProperty("URL");
		apiUrl = prop.getProperty("serviceURL");

	}

	@Test
	public void testGETMethod() throws ClientProtocolException, IOException {
		client = new RESTClient();
		httpResponse = client.get(url + apiUrl);

		// 1. to get status code
		int statusCode = httpResponse.getStatusLine().getStatusCode();
		System.out.println("status code: " + statusCode);
		Assert.assertEquals(200, statusCode);
		

		// 2. to get response in string format
		// getEntity will get entire response
		String responseString = EntityUtils.toString(httpResponse.getEntity(), "UTF-8");
		// to convert response string into json object
		JSONObject responseJSON = new JSONObject(responseString);
		System.out.println("Response: " + responseJSON);

		// 3. to get headers and store in array
		Header[] headersArray = httpResponse.getAllHeaders();

		// 4. to store headers in key value pair
		HashMap<String, String> allHeaders = new HashMap<String, String>();
		for (Header header : headersArray) {
			allHeaders.put(header.getName(), header.getValue());
		}
		System.out.println("Headers are: " + allHeaders);
	}

}
