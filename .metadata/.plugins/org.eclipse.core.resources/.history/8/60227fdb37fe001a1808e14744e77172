package com.qa.client;

import java.io.IOException;
import java.util.HashMap;

import org.apache.http.Header;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

public class RESTClient {

	// 1. GET METHOD
	public void get(String url) throws ClientProtocolException, IOException {
		// create simple client connection
		CloseableHttpClient httpClient = HttpClients.createDefault();
		// create http get connection
		HttpGet httpGet = new HttpGet(url);
		// to execute the request (like hit url)
		CloseableHttpResponse httpResponse = httpClient.execute(httpGet);
		// to get status code
		int statusCode = httpResponse.getStatusLine().getStatusCode();
		System.out.println("status code: " + statusCode);

		// to get response in string format
		// getEntity will get entire response
		String responseString = EntityUtils.toString(httpResponse.getEntity(), "UTF-8");
		// to convert response string into json object
		JSONObject responseJSON = new JSONObject(responseString);
		System.out.println("Response: " + responseJSON);

		// to get headers and store in array
		Header[] headersArray = httpResponse.getAllHeaders();
		// to store headers in key value pair
		HashMap<String, String> allHeaders = new HashMap<String, String>();
		for (Header header : headersArray) {
			allHeaders.put(header.getName(), header.getValue());
		}
		System.out.println("Headers are: " + allHeaders);

	}

}
