package com.qa.client;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

public class RESTClient {

	// 1. GET METHOD WITHOUT HEADERS
	public CloseableHttpResponse get(String url) throws ClientProtocolException, IOException {
		// create simple client connection with default configuration
		CloseableHttpClient httpClient = HttpClients.createDefault();
		// create http get connection
		HttpGet httpGet = new HttpGet(url);
		// to execute the request (like hit url)
		CloseableHttpResponse httpResponse = httpClient.execute(httpGet);

		return httpResponse;

	}

	// 2. GET METHOD WITH HEADERS
	public CloseableHttpResponse get(String url, HashMap<String, String> headermap)
			throws ClientProtocolException, IOException {
		// create simple client connection
		CloseableHttpClient httpClient = HttpClients.createDefault();
		// create http get connection
		HttpGet httpGet = new HttpGet(url);
		// to add headers in http get connection
		for (Map.Entry<String, String> entry : headermap.entrySet()) {
			httpGet.addHeader(entry.getKey(), entry.getValue());
		}

		// to execute the request (like hit url)
		CloseableHttpResponse httpResponse = httpClient.execute(httpGet);

		return httpResponse;

	}

	// 3. POST METHOD
	public CloseableHttpResponse post(String url, String entityString, HashMap<String, String> headerMap)
			throws ClientProtocolException, IOException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpPost httpPost = new HttpPost(url);
		// for payload(body)
		httpPost.setEntity(new StringEntity(entityString));

		// for headers
		for (Map.Entry<String, String> entry : headerMap.entrySet()) {
			httpPost.addHeader(entry.getKey(), entry.getValue());
		}
		CloseableHttpResponse httpResponse = httpClient.execute(httpPost);
		return httpResponse;
	}

	// 4. PUT METHOD
	public CloseableHttpResponse put(String url, String entityString, HashMap<String, String> headerMap)
			throws ClientProtocolException, IOException {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		HttpPut httpPut = new HttpPut(url);
		// for payload (body)
		httpPut.setEntity(new StringEntity(entityString));

		// add headers
		for (Map.Entry<String, String> entry : headerMap.entrySet()) {
			httpPut.addHeader(entry.getKey(), entry.getValue());
		}
		CloseableHttpResponse httpResponse = httpClient.execute(httpPut);

		return httpResponse;
	}
	
	//5. DELETE METHOD
	public CloseableHttpResponse delete(String url, HashMap<String,String> headerMap) throws ClientProtocolException, IOException {
		CloseableHttpClient httpClient=HttpClients.createDefault();
		HttpDelete httpDelete =new HttpDelete(url);
		
		//add headers
		for(Map.Entry<String, String> entry:headerMap.entrySet()) {
			
		}
		
		CloseableHttpResponse httpResponse=httpClient.execute(httpDelete);
		return httpResponse;
	}
}
